import numpy as np
import random
import sys
import time

#  Storer, Wu, and Vaccari easy 50x10 instance (Table 2, instance 19)
#  50 10
#  7 74 1 27 5 66 3 89 6 58 0 11 8 77 9 17 2 70 4 97
#  5 10 0 11 2 38 3 60 1 50 7 35 6 94 9 52 4  2 8 20
#  7 17 0 65 6 93 8 62 9 91 5  2 1 51 2  4 3 19 4 10
#  4 87 3  3 9 81 0 17 6 44 2 82 7 16 5 13 8 100 1 85
#  9 18 6 33 7 35 0 78 2 68 3 68 8  3 5  2 4 53 1 25
#  2 36 8 41 6 60 9 43 0 66 5 34 3 24 7 11 1  5 4 55
#  9 52 4 99 6 62 0 50 1 24 8 73 7 19 3 23 2 15 5  2
#  4 85 9 21 3 27 7 53 0 86 1 36 6 35 5 99 8 30 2 43
#  6 43 5 31 9 99 2 12 0  6 7 79 3 81 1 18 8 73 4 55
#  4 90 6 100 1 15 0 40 7 96 9 25 5 43 8 23 2 31 3  7
#  5 61 4 88 6 10 3 48 0 100 2 62 1 83 8 20 7 42 9 19
#  9 35 7 41 6 16 3 58 0 86 2 69 5 58 1 93 4 47 8 77
#  2 61 0 40 4 99 1 51 7 46 6 39 3 43 9 37 8 88 5  9
#  4 15 8 38 2 84 5 98 6 17 1 91 7 91 9 23 3 48 0 98
#  3 26 2 42 8 55 4 24 0 43 1 83 9 27 7 38 6 37 5 58
#  5 21 8 78 6 97 0 77 9 82 4 26 3 22 1 90 7 57 2 31
#  4  3 9 44 3 90 1 64 5 52 8 35 7 18 2 45 0  4 6 14
#  8 60 6 59 3 67 2 85 0 43 7 93 5 44 4 22 1 68 9 38
#  4 77 8 41 2 74 6 99 0 100 1 45 9 14 3 26 7 98 5 77
#  8 38 9 57 7 42 5 64 1 80 6 81 4 70 3 13 2 41 0 65
#  9 36 4 22 8 39 0 76 1 78 2 27 5 55 3 10 6  5 7 71
#  7 70 9 81 1 60 5 85 3 63 6 97 2 61 8 44 0  5 4 35
#  9 38 0 94 2 46 5 20 8 87 1 41 4 41 3 40 7 99 6 48
#  7 30 6  9 5 13 2 79 8 81 0 25 9 93 4 85 3 78 1 76
#  4  6 8 58 6 51 7 48 2 68 3 34 5 78 9 59 1 98 0 36
#  4 90 6 56 7 97 9 37 0 38 1 47 2 56 3  8 5 37 8  7
#  0 66 8 15 1 39 5 89 7  3 9 54 3 24 2 14 6 99 4 73
#  3 12 9 37 4 79 8 95 0 50 1 74 6  1 5 55 7 98 2 49
#  8 99 9 79 3 99 2 87 0 80 4 13 5 99 6 13 1 54 7 61
#  1 51 9 21 3 32 6 20 0 80 7 58 2 91 5 84 8 62 4 91
#  1 11 8 38 2 14 9 12 3 39 5 34 0 37 6 94 4 10 7  2
#  6 76 9 86 3 40 4 30 2 97 0 59 8 100 7  9 5 55 1 86
#  3 33 1 49 0 94 2 17 6 17 8 70 5 17 7 42 4 26 9 24
#  4 75 1 20 9 93 2 58 3 51 0 94 6 24 7 70 8 51 5 82
#  8 59 1  9 3 59 5 62 9 79 7 53 6 48 4 98 2 76 0 71
#  6 90 2 35 5 89 0 59 9 28 7 51 4 69 3 36 1 32 8 27
#  5 10 6 85 4 97 1  3 0 79 9 86 3 10 7 80 2 37 8 39
#  7 60 0 27 5 69 8 58 6 67 2 36 9 31 3 69 1 16 4 22
#  2 27 5 16 6 15 4 40 8 16 1 92 9 60 7 43 3  2 0  7
#  1 79 7 99 0 27 9 56 5 29 6 17 8 67 4 34 3 86 2 61
#  6 57 7 100 4 73 9 17 8  3 3 64 2 99 0 71 5 27 1 90
#  2 80 5 23 4 54 6 39 9 77 3 65 7 59 0  7 1 63 8 32
#  4 98 6 17 8 44 5  1 3 10 7 56 2 95 9 80 0 99 1 64
#  8 60 7 74 3 60 6 30 0 81 5 25 4 89 9 19 2 59 1 21
#  1 67 0 42 8 93 2 47 5 34 7 11 6 100 9 15 4 99 3  2
#  9 35 3 61 5 93 8 83 7 87 4 66 0 96 2 55 1 41 6 61
#  8 22 5 25 7 29 3 70 6 93 1 19 0 49 9 62 2 19 4 73
#  8 11 4 93 5 97 1 28 2 14 0 75 7 41 3 40 9 62 6 66
#  7 76 6 61 8 64 3 90 0 20 2 43 9 50 1 13 5  4 4 47
#  3 38 4 11 0 30 5 37 7 57 9 64 1 68 8 42 2 19 6 79
#  +++++++++++++++++++++++++++++
power = {
    0: {0:74, 1:27, 2:66, 3:89, 4:58 , 5:11, 6:77, 7:17, 8:70, 9:97},
    1: {0:10, 1:11, 2:38, 3:60, 4:50, 5:35 , 6:94, 7:52, 8:2, 9:20},
    2: {0:17, 1:65, 2:93, 3:62, 4:91, 5:2 , 6:51, 7:4, 8:19, 9:10},
    3: {0:87, 1:3, 2:81, 3:17, 4:44, 5:82 , 6:16, 7:13, 8:100, 9:85},
    4: {0:18, 1:33, 2:35, 3:78, 4:68, 5:68 , 6:3, 7:2, 8:53, 9:25},
    5: {0:36, 1:41, 2:60, 3:43, 4:66, 5:34 , 6:24, 7:11, 8:5, 9:55},
    6: {0:52, 1:99, 2:62, 3:50, 4:24, 5:73 , 6:19, 7:23, 8:15, 9:2},
    7: {0:85, 1:21, 2:27, 3:53, 4:86, 5:36 , 6:35, 7:99, 8:80, 9:43},
    8: {0:43, 1:31, 2:99, 3:12, 4:6, 5:79 , 6:81, 7:18, 8:73, 9:55},
    9: {0:90, 1:100, 2:15, 3:40, 4:96, 5:25 , 6:43, 7:23, 8:31, 9:7},
    10: {0:61, 1:88, 2:10, 3:48, 4:100, 5:62 , 6:83, 7:20, 8:42, 9:19},
    11: {0:35, 1:41, 2:16, 3:58, 4:86, 5:69, 6:58, 7:93, 8:47, 9:77},
    12: {0:61, 1:40, 2:99, 3:51, 4:46, 5:39 , 6:43, 7:37, 8:88, 9:9},
    13: {0:15, 1:38, 2:84, 3:98, 4:17, 5:91 , 6:91, 7:23, 8:48, 9:98},
    14: {0:26, 1:42, 2:55, 3:24, 4:43, 5:83 , 6:27, 7:38, 8:37, 9:58},
    15: {0:21, 1:78, 2:97, 3:77, 4:82, 5:26 , 6:22, 7:90, 8:57, 9:31},
    16: {0:3, 1:44, 2:90, 3:64, 4:52, 5:35 , 6:18, 7:45, 8:4, 9:14},
    17: {0:60, 1:59, 2:67, 3:85, 4:43, 5:93 , 6:44, 7:22, 8:69, 9:38},
    18: {0:77, 1:41, 2:74, 3:99, 4:100, 5:45 , 6:14, 7:26, 8:98, 9:77},
    19: {0:38, 1:57, 2:42, 3:64, 4:80, 5:81 , 6:70, 7:13, 8:41, 9:65},
    20: {0:36, 1:22, 2:39, 3:76, 4:78, 5:27 , 6:55, 7:10, 8:5, 9:71},
    21: {0:70, 1:81, 2:60, 3:85, 4:63, 5:97 , 6:61, 7:44, 8:5, 9:35},
    22: {0:38, 1:94, 2:46, 3:20, 4:87, 5:41 , 6:41, 7:40, 8:99, 9:48},
    23: {0:30, 1:9, 2:13, 3:79, 4:81, 5:25 , 6:93, 7:85, 8:78, 9:76},
    24: {0:6, 1:58, 2:51, 3:48, 4:68, 5: 34, 6:78, 7:59, 8:98, 9:36},
    25: {0:90, 1:56, 2:97, 3:37, 4:38, 5:47 , 6:56, 7:8, 8:37, 9:7},
    26: {0:66, 1:15, 2:39, 3:89, 4:3, 5:54 , 6:24, 7:14, 8:99, 9:73},
    27: {0:12, 1:37, 2:79, 3:95, 4:50, 5:74 , 6:1, 7:55, 8:98, 9:49},
    28: {0:99, 1:79, 2:99, 3:87, 4:80, 5:13 , 6:99, 7:13, 8:54, 9:61},
    29: {0:51, 1:21, 2:32, 3:60, 4:80, 5:58 , 6:91, 7:84, 8:62, 9:91},
    30: {0:11, 1:38, 2:14, 3:12, 4:39, 5:34 , 6:37, 7:10, 8:10, 9:2},
    31: {0:76, 1:86, 2:40, 3:30, 4:97, 5:59 , 6:100, 7:9, 8:55, 9:86},
    32: {0:33, 1:49, 2:94, 3:17, 4:17, 5:70 , 6:17, 7:42, 8:26, 9:24},
    33: {0:75, 1:20, 2:93, 3:58, 4:51, 5:94 , 6:24, 7:70, 8:51, 9:82},
    34: {0:59, 1:9, 2:59, 3:62, 4:79, 5:53 , 6:48, 7:98, 8:76, 9:71},
    35: {0:90, 1:35, 2:89, 3:59, 4:28, 5:51 , 6:69, 7:36, 8:32, 9:27},
    36: {0:10, 1:85, 2:97, 3:3, 4:79, 5:86 , 6:10, 7:80, 8:37, 9:39},
    37: {0:60, 1:27, 2:69, 3:58, 4:67, 5:36 , 6:31, 7:69, 8:16, 9:22},
    38: {0:27, 1:16, 2:15, 3:40, 4:16, 5:92 , 6:60, 7:43, 8:2, 9:8},
    39: {0:70, 1:99, 2:27, 3:56, 4:29, 5:17 , 6:67, 7:34, 8:86, 9:61},
    40: {0:57, 1:100, 2:73, 3:17, 4:3, 5:64 , 6:99, 7:71, 8:27, 9:90},
    41: {0:80, 1:23, 2:54, 3:39, 4:77, 5:65 , 6:59, 7:7, 8:53, 9:32},
     42: {0:98, 1:17, 2:44, 3:1, 4:10, 5:56 , 6:95, 7:80, 8:99, 9:64},
    43: {0:60, 1:74, 2:60, 3:30, 4:81, 5:25 , 6:89, 7:19, 8:59, 9:21},
    44: {0:67, 1:42, 2:93, 3:47, 4:34, 5:11 , 6:100, 7:15, 8:99, 9:2},
    45: {0:35, 1:61, 2:93, 3:83, 4:87, 5:66 , 6:96, 7:55, 8:41, 9:61},
    46: {0:22, 1:25, 2:29, 3:70, 4:93, 5:19 , 6:49, 7:62, 8:19, 9:73},
    47: {0:11, 1:93, 2:97, 3:28, 4:14, 5:75 , 6:41, 7:40, 8:62, 9:66},
    48: {0:76, 1:61, 2:64, 3:90, 4:20, 5:43 , 6:50, 7:13, 8:4, 9:47},
    49: {0:38, 1:11, 2:30, 3:37, 4:57, 5:64 , 6:68, 7:42, 8:19, 9:79}
    
}

machine = {
     0: {0:7, 1:1, 2:5, 3:3, 4:6 , 5:0 , 6:8, 7:9, 8:2, 9:4},
    1: {0:5, 1:0, 2:2, 3:3, 4:1, 5:7 , 6:6, 7:9, 8:4, 9:8},
    2: {0:7, 1:0, 2:6, 3:8, 4:9, 5:5 , 6:1, 7:2, 8:3, 9:4},
    3: {0:4, 1:3, 2:9, 3:0, 4:6, 5:2, 6:7, 7:5, 8:8, 9:1},
    4: {0:9, 1:6, 2:7, 3:0, 4:2, 5:3 , 6:8, 7:5, 8:4, 9:1},
    5: {0:2, 1:8, 2:6, 3:9, 4:0, 5:5 , 6:3, 7:7, 8:1, 9:4},
    6: {0:9, 1:4, 2:6, 3:0, 4:1, 5:8 , 6:7, 7:3, 8:2, 9:5},
    7: {0:4, 1:9, 2:3, 3:7, 4:0, 5:1 , 6:6, 7:5, 8:8, 9:2},
    8: {0:6, 1:5, 2:9, 3:2, 4:0, 5:7 , 6:3, 7:1, 8:8, 9:4},
    9: {0:4, 1:6, 2:1, 3:0, 4:7, 5:9 , 6:5, 7:8, 8:2, 9:3},
    10: {0:5, 1:4, 2:6, 3:3, 4:0, 5:2 , 6:1, 7:8, 8:7, 9:9},
    11: {0:9, 1:7, 2:6, 3:3, 4:0, 5:2 , 6:5, 7:1, 8:4, 9:8},
    12: {0:2, 1:0, 2:4, 3:1, 4:7, 5:6 , 6:3, 7:9, 8:8, 9:5},
    13: {0:4, 1:8, 2:2, 3:5, 4:6, 5:1 , 6:7, 7:9, 8:3, 9:0},
    14: {0:3, 1:2, 2:8, 3:4, 4:0, 5:1 , 6:9, 7:7, 8:6, 9:5},
    15: {0:5, 1:8, 2:6, 3:0, 4:9, 5:4 , 6:3, 7:1, 8:7, 9:2},
    16: {0:4, 1:9, 2:3, 3:1, 4:5, 5:8 , 6:7, 7:2, 8:0, 9:6},
    17: {0:8, 1:6, 2:3, 3:2, 4:0, 5:7 , 6:5, 7:4, 8:1, 9:9},
    18: {0:4, 1:8, 2:2, 3:6, 4:0, 5:1 , 6:9, 7:3, 8:7, 9:5},
    19: {0:8, 1:9, 2:7, 3:5, 4:1, 5:6 , 6:4, 7:3, 8:2, 9:0},
    20: {0:9, 1:4, 2:8, 3:0, 4:1, 5:2, 6:5, 7:3, 8:6, 9:7},
    21: {0:7, 1:9, 2:1, 3:5, 4:3, 5:6 , 6:2, 7:8, 8:0, 9:4},
    22: {0:9, 1:0, 2:2, 3:5, 4:8, 5:1 , 6:4, 7:3, 8:7, 9:6},
    23: {0:7, 1:6, 2:5, 3:2, 4:8, 5:0 , 6:9, 7:4, 8:3, 9:1},
    24: {0:4, 1:8, 2:6, 3:7, 4:2, 5:3 , 6:5, 7:9, 8:1, 9:0},
    25: {0:4, 1:6, 2:7, 3:9, 4:0, 5:1 , 6:2, 7:3, 8:5, 9:8},
    26: {0:0, 1:8, 2:1, 3:5, 4:7, 5:9 , 6:3, 7:2, 8:6, 9:4},
    27: {0:3, 1:9, 2:4, 3:8, 4:0, 5:1 , 6:6, 7:5, 8:7, 9:2},
    28: {0:8, 1:9, 2:3, 3:2, 4:0, 5:4 , 6:5, 7:6, 8:1, 9:7},
    29: {0:1, 1:9, 2:3, 3:6, 4:0, 5:7 , 6:2, 7:5, 8:8, 9:4},
    30: {0:1, 1:8, 2:2, 3:9, 4:3, 5:5 , 6:0, 7:6, 8:4, 9:7},
    31: {0:6, 1:9, 2:3, 3:4, 4:2, 5:0 , 6:8, 7:7, 8:9, 9:1},
    32: {0:3, 1:1, 2:0, 3:2, 4:6, 5:8 , 6:5, 7:7, 8:4, 9:9},
    33: {0:4, 1:1, 2:9, 3:2, 4:3, 5:0 , 6:6, 7:7, 8:8, 9:5},
    34: {0:8, 1:1, 2:3, 3:5, 4:9, 5:7 , 6:6, 7:4, 8:2, 9:0},
    35: {0:6, 1:2, 2:5, 3:0, 4:9, 5:7 , 6:4, 7:3, 8:1, 9:8},
    36: {0:5, 1:6, 2:4, 3:1, 4:0, 5:9 , 6:3, 7:7, 8:2, 9:8},
    37: {0:7, 1:0, 2:5, 3:8, 4:6, 5:2 , 6:9, 7:3, 8:1, 9:4},
    38: {0:2, 1:5, 2:6, 3:4, 4:8, 5:1 , 6:9, 7:7, 8:3, 9:0},
    39: {0:1, 1:7, 2:0, 3:9, 4:5, 5:6 , 6:8, 7:4, 8:3, 9:2},
    40: {0:6, 1:7, 2:4, 3:9, 4:8, 5:3 , 6:2, 7:0, 8:5, 9:1},
    41: {0:2, 1:5, 2:4, 3:6, 4:9, 5:3 , 6:7, 7:0, 8:1, 9:8},
    42: {0:4, 1:6, 2:8, 3:5, 4:3, 5:7 , 6:2, 7:9, 8:0, 9:1},
    43: {0:8, 1:7, 2:3, 3:6, 4:0, 5:5 , 6:4, 7:9, 8:2, 9:1},
    44: {0:1, 1:0, 2:8, 3:2, 4:5, 5:7 , 6:6, 7:9, 8:4, 9:3},
    45: {0:9, 1:3, 2:5, 3:8, 4:7, 5:4 , 6:0, 7:2, 8:1, 9:6},
    46: {0:8, 1:5, 2:7, 3:3, 4:6, 5:1 , 6:0, 7:9, 8:2, 9:4},
    47: {0:8, 1:4, 2:5, 3:1, 4:2, 5:0 , 6:7, 7:3, 8:9, 9:6},
    48: {0:7, 1:6, 2:8, 3:3, 4:0, 5:2 , 6:9, 7:1, 8:5, 9:4},
    49: {0:3, 1:4, 2:0, 3:5, 4:7, 5:9 , 6:1, 7:8, 8:2, 9:6}
}

# used_machine ={}
debug=False

# def prepare_used_machine_dict(j, i, m, tuple):


# input1 = 215013424301243205154530


def solution(li):
    job_data = {}
    result_data = {}
    used_machine = {}
    # li = [int(x) for x in str(input1)]
    for j in li:
        if j  in job_data:
            job_data[j] = job_data[j] + 1
        else:
            job_data[j] = 0
        i = job_data[j]
        m = machine[j][i]
        tuple = (j,i)
        if i > 0:
            if m in used_machine:
                my_list = used_machine[m]
                new_tuple = (j,i-1)
                ans = max(result_data[my_list[len(my_list)-1]], result_data[new_tuple]) + power[j][i]
                result_data[tuple] = ans
            else:
                new_tuple = (j,i-1)
                ans = result_data[new_tuple] + power[j][i]
                result_data[tuple] = ans
        else:
            if m in used_machine:
                my_list = used_machine[m]
                # print(result_data)
                ans = result_data[my_list[len(my_list)-1]] + power[j][i]
                result_data[tuple] = ans
            else:
                ans = power[j][i]
                result_data[tuple] = ans
        if m in used_machine:
            used_machine[m].append(tuple)
        else:
            used_machine[m] = [tuple]

    #print("result_data   ",result_data)
    # import pprint
    # pprint.pprint(c)
    # print("max ", max(list(result_data.values())))
    return max(list(result_data.values()))

def generateRandomSequence():
        indexes = np.array([i for i in range(0,6)])
        # print(indexes)
        random.shuffle(indexes)
        print("Initial Solution",indexes)
        return indexes.tolist()

def swapTwoJobs(seq,pos1,pos2):
    seq[pos1], seq[pos2] = seq[pos2], seq[pos1]
    return seq

def simulated_annealing(old_seq,Ti = 10000,Tf = 1 ,alpha = 0.50):
    #Number of jobs givens
    n = len(old_seq)
    default_timer = time.time

    s = default_timer.__call__()
    # neh=NEH()
    # #Initialize the primary seq
    # # old_seq,schedules,old_makeSpan, _ = self.palmer_heuristic()
    # # old_seq, schedules, old_makeSpan, _ = n.nehAlgo(self.data, self.nb_machines, self.nb_jobs)
    # old_seq,  old_makeSpan = neh.nehAlgo(
    #     self.data, self.nb_machines, self.nb_jobs)
    # print('Initial Sequence of NEH =>', old_seq)
    # print('Initial Sequence of NEH makespan =>', old_makeSpan)
    # old_seq=self.generateRandomSequence()
    # old_makeSpan = commonFunction.makespan(old_seq, self.data, self.nb_machines)[
    #         self.nb_machines - 1][len(old_seq)]

    # old_seq = [3,4,2,4,2,3,0,1,2,4,3,2,0,5,1,5,4,5,3,0,1,2,3,4]
    old_makeSpan = solution(old_seq)
    if debug:
        print('Initial Sequence =>', old_seq)
        print('Initial Sequence makespan =>', old_makeSpan)
    bestSolution = old_makeSpan
    bestSequence = old_seq
    new_seq = []       
    delta_mk1 = 0
    #Initialize the temperature
    if debug:
        print("Initial Temperature =>",Ti)
        print("Final Temperature =>",Tf)
        print("Alpha",alpha)
    T = Ti
    Tf = Tf
    alpha = alpha
    # of iterations
    temp_cycle = 0
    count =0 
    count2 = 0
    
    while T >= Tf  :
        count = count+1
        for i1 in range(30):    
            count2 +=1
        new_seq = old_seq.copy()
        # Insertion method
        # job = new_seq.pop(randint(0,n-1))
        # new_seq.insert(randint(0,n-1),job) # Swap and insertion for new sequence 
        
        #Swap Method
        u,v=random.randint(0, n-1), random.randint(0, n-1)
        job=u
        new_seq=swapTwoJobs(new_seq,u,v)
        # print("new_seq ",new_seq)

        # Call solution
        new_make_span = solution(new_seq)
        
        # new_make_span = commonFunction.makespan(new_seq, self.data, self.nb_machines)[
        #     self.nb_machines - 1][len(new_seq)]
        # new_make_span = self._get_makespan(new_seq,self.data)
        if debug:
            print('Job :',job)
            print('New Sequence :', new_seq)
            print('New Sequence make span:', new_make_span)
        delta_mk1 = new_make_span - old_makeSpan
        # print("Delta ",delta_mk1)
        # if delta_mk1 <= 0:
        #     old_seq = new_seq
        #     old_makeSpan = new_make_span
        r=(old_seq == new_seq)
        if debug:
            print('Check Sequence Change',r)
        if r == False:
            if new_make_span < old_makeSpan:
                if debug:
                    print("MakeSpan Swap Sequence", "new_make_span =>",new_make_span," old_makeSpan=>",old_makeSpan)
                old_seq = new_seq
                old_makeSpan = new_make_span
                
            else :
                delta_mk1 = new_make_span - old_makeSpan
                Aprob = np.exp((-1*(delta_mk1)/T))
                p = np.random.uniform(0.1,0.9)
                if debug:
                    print("Proability",p)
                    print("Delta Change ", delta_mk1)
                    print("Aprob => ", Aprob)
                    print(p <= Aprob)
                if p < Aprob:
                    old_seq = new_seq
                    old_makeSpan = new_make_span
                    if debug:
                        print("Proability Swap Sequence")
                else :
                    #The solution is discarded
                    if debug:
                        print("Discard Iteration")
                        print('Old Sequence :',old_seq)
                    pass
        T = T * alpha 
        if debug:
            print("New Temperature=>",T)
        temp_cycle += 1
        if bestSolution > old_makeSpan:
            
            bestSolution = old_makeSpan
            bestSequence = old_seq
            if debug:
                print("Best Solution Swap")
                print('New Swap Sequence :', bestSequence)
                print('New Sequence make span:', bestSolution)
                print("Iteration Count:", count)
    

    e = default_timer.__call__()
    if debug:
        print("Best Sequence",bestSequence)
        print("Best MakeSpan", bestSolution)
        print("Iteration Count:", count)
    
    #Result Sequence
    # seq=bestSequence
    # old_makeSpan=bestSolution
    print(bestSolution-old_makeSpan)
    d = float((bestSolution-old_makeSpan)/old_makeSpan)
    return bestSequence, bestSolution, e-s, d


# old_seq = [3,4,2,4,2,3,0,1,2,4,3,2,0,5,1,5,4,5,3,0,1,2,3,4] ,0,4,3,2,1,3,0,4,2,3,2,1,0,3,1,0,2,4,3,0,1,2,3,0,4,2,3,1,4,1
28
new_seq = [11,7,20,48,34,43,10,24,17,21,32,42,4,0,26,37,45,38,13,12,9,2,7,8,22,35,47,6,4,8,11,12,12,9,0,3,13,17,20,48,
           34,28,43,18,29,19,30,27,36,46,24,33,44,21,32,42,23,37,31,40,22,35,47,25,39,49,41,12,11,7,13,12,5,8,13,11,12,13,0,9,
           7,13,11,12,13,10,23,28,31,24,40,25,39,49,22,35,37,26,45,38,47,41,27,14,16,4,13,15,28,12,8,14,13,18,24,29,22,35,47,33,
           19,37,30,36,46,44,11,9,13,12,18,29,33,44,10,2,11,6,16,18,29,20,48,34,42,43,33,24,44,26,45,38,23,31,37,40,25,39,20,48,
           34,42,43,22,35,47,49,41,7,12,23,31,40,25,39,49,41,3,11,14,10,15,9,11,5,4,8,11,17,21,32,42,10,16,9,7,14,6,24,14,
           15,10,1,20,48,34,37,42,43,9,2,7,27,28,5,10,6,14,16,9,0,7,19,30,36,24,26,45,38,46,15,10,17,37,21,32,20,48,34,43,
           23,27,31,40,25,39,49,41,19,30,36,46,3,4,9,18,29,33,44,10,17,19,28,23,31,40,27,24,25,39,49,41,30,36,46,21,32,22,35,47,
           14,8,6,7,16,23,31,40,25,27,39,49,41,15,17,27,28,21,32,18,29,33,22,35,47,19,26,45,38,24,30,36,46,44,10,5,8,37,17,19,
           30,36,46,27,21,32,42,1,9,37,26,45,28,38,2,24,14,7,20,48,34,43,6,0,15,16,8,5,3,6,8,17,21,32,14,4,1,20,48,34,
           22,35,47,42,43,5,15,2,6,8,16,3,4,0,23,31,40,25,39,49,41,6,26,45,38,15,27,18,29,33,19,30,36,37,46,26,28,45,38,44,
           5,1,2,4,6,5,3,0,16,1,18,29,23,31,40,25,39,49,41,33,20,48,34,43,28,44,5,4,3,15,2,22,35,47,26,45,38,17,21,32,
           42,16,5,0,3,4,1,2,15,16,3,0,1,20,48,34,42,43,0,3,19,30,36,46,2,18,28,29,33,26,45,38,44,1,1,2,1,14,17,21,
           32,19,23,31,40,25,39,49,41,30,36,22,35,47,46,18,29,33,27,44] 

n = len(new_seq)
for j in range(5):
    new_seq, best_value, best_time, delta = simulated_annealing(new_seq)
    print("Best Sequence",new_seq)
    print("Best MakeSpan", best_value)
    print("Time duration", best_time)
    print("Delta     ", delta)
    
    
    for i in range(10):
        u,v=random.randint(0, n-1), random.randint(0, n-1)
        new_seq=swapTwoJobs(new_seq,u,v)
        #print("New Random Seq ", new_seq)
    


# generateRandomSequence()
# generateRandomSequence()
# print(generateRandomSequence())
# print(solution(old_seq))
# solution(old_seq)
# solution(new_seq)
# solution(424230124320515453012343)
# solution(242301243205154530123434)
# solution(423012432051545301234342)
# print()
# pprint.pprint(used_machine)



    

